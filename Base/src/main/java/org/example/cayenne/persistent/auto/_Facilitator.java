package org.example.cayenne.persistent.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;
import org.example.cayenne.persistent.Competition;
import org.example.cayenne.persistent.EventRoster;

/**
 * Class _Facilitator was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Facilitator extends CayenneDataObject {

    public static final String FIRSTNAME_PROPERTY = "firstname";
    public static final String LASTNAME_PROPERTY = "lastname";
    public static final String MAIN_JUDGE_PROPERTY = "mainJudge";
    public static final String PASSWORD_PROPERTY = "password";
    public static final String USERNAME_PROPERTY = "username";
    public static final String COMPETITION_PROPERTY = "competition";
    public static final String EVENT_PROPERTY = "event";

    public static final String ID_PK_COLUMN = "ID";

    public void setFirstname(String firstname) {
        writeProperty(FIRSTNAME_PROPERTY, firstname);
    }
    public String getFirstname() {
        return (String)readProperty(FIRSTNAME_PROPERTY);
    }

    public void setLastname(String lastname) {
        writeProperty(LASTNAME_PROPERTY, lastname);
    }
    public String getLastname() {
        return (String)readProperty(LASTNAME_PROPERTY);
    }

    public void setMainJudge(Boolean mainJudge) {
        writeProperty(MAIN_JUDGE_PROPERTY, mainJudge);
    }
    public Boolean getMainJudge() {
        return (Boolean)readProperty(MAIN_JUDGE_PROPERTY);
    }

    public void setPassword(String password) {
        writeProperty(PASSWORD_PROPERTY, password);
    }
    public String getPassword() {
        return (String)readProperty(PASSWORD_PROPERTY);
    }

    public void setUsername(String username) {
        writeProperty(USERNAME_PROPERTY, username);
    }
    public String getUsername() {
        return (String)readProperty(USERNAME_PROPERTY);
    }

    public void setCompetition(Competition competition) {
        setToOneTarget(COMPETITION_PROPERTY, competition, true);
    }

    public Competition getCompetition() {
        return (Competition)readProperty(COMPETITION_PROPERTY);
    }


    public void addToEvent(EventRoster obj) {
        addToManyTarget(EVENT_PROPERTY, obj, true);
    }
    public void removeFromEvent(EventRoster obj) {
        removeToManyTarget(EVENT_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<EventRoster> getEvent() {
        return (List<EventRoster>)readProperty(EVENT_PROPERTY);
    }


}
